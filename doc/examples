[Spindle.cache.set(string key, mixed value)]
Spindle.cache.set("ffi", require("ffi"))
[Spindle.cache.getOrDefault(string key, mixed default)]
local ffi = Spindle.cache.getOrDefault("ffi", require("ffi"))
[Spindle.cache.get(string key)]
local ffi = Spindle.cache.get("ffi") -- Will internally call Spindle.cache.getOrDefault("ffi", false)
[Spindle.cache.unset(string key)]
Spindle.cache.unset("ffi")
[Spindle.config.set(string key, mixed value)]
Spindle.config.set("floatingpoint_precision", 3)
[Spindle.config.setIfEmpty(string key, mixed value)]
Spindle.config.setIfEmpty("floatingpoint_precision", 3)
[Spindle.config.get(string key)]
Spindle.math.round(3.14156, Spindle.config.get("floatingpoint_precision"))
[Spindle.config.getOrDefault(string key, mixed default)]
Spindle.math.round(3.14156, Spindle.config.getOrDefault("floatingpoint_precision", 3))
[Spindle.config.unset(string key)]
Spindle.config.unset("floatingpoint_precision")
[FFIObject.new(string name, string cdef, function init_callback, table functions, string load_library)]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
[FFIObject.fromtable(table t)]
local t = {name = "example", cdef = [[typedef unsigned int UINT;]], init_callback = function() end, functions = {}, load_library = ""}
local ffi_object = FFIObject.fromtable(t)
[FFIObject:name([string name])]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
ffi_object:name("test")
ffi_object:name() -- "test"
[FFIObject:cdef([string cdef])]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
ffi_object:cdef([[typedef int INT;]])
ffi_object:cdef() -- [[typedef int INT;]]
[FFIObject:init_callback([function init_callback])]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
ffi_object:init_callback(function() print(self:name()) end)
ffi_object:init_callback() -- func
[FFIObject:functions([table functions])]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
ffi_object:functions({test = function() return 0 end})
ffi_object:functions() -- {test = func}
[FFIObject:load_library([string load_library])]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
ffi_object:load_library("advapi")
ffi_object:load_library() -- "advapi"
[FFIObject:lib([cdata lib])]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
ffi_object:lib(Spindle.ffi.load("advapi"))
ffi_object:lib() -- cdata object
[FFIObject:initialized([boolean initialized])]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
ffi_object:initialized(true)
ffi_object:initialized() -- true
[FFIObject:totable()]
local ffi_object = FFIObject.new("example", [[typedef unsigned int UINT;]], function() end, {}, "")
local t = ffi_object:totable() -- {name = "example", cdef = [[typedef unsigned int UINT;]], init_callback = function() end, functions = {}, load_library = ""}
[Spindle.ffi.new(string name, string cdef, function init_callback, table functions[, string load_library])]
Spindle.ffi.new(
	"example",
	[[
typedef unsigned int UINT;
	]],
	function() end,
	{
		func = function(v)
			return v
		end,
	}
)
[Spindle.ffi.send(string ffi_name, string function_name[, ...])]
-- A normal call to the function would looks like the following:

-- Ensure that all Instances of FFIObject get initialized
Spindle.ffi.initialize()
-- The you can go into cache, look for your FFIObject instance, catch the functions and call the right one
local utf16_string = Spindle.cache.get("ffi_cache").utf8_ffi:functions()["utf8_to_utf16"]("Hello World")

-- Much easier is the send method, which will do this stuff for you:
local utf16_string = Spindle.ffi.send("utf8_ffi", "utf8_to_utf16", "Hello World")
[Spindle.ffi.initialize()]
Spindle.ffi.initialize()
[Spindle.ffi.ffi()]
local cp_utf = Spindle.ffi.ffi().C.CP_UTF8 -- Normally 65001 for utf8 functions - Must be defined via CDEF before
[Spindle.ffi.load(...)]
local advapi = Spindle.ffi.ffi().load("Advapi32")
[Spindle.ffi.cdef(...)]
Spindle.ffi.cdef([[
enum{CP_UTF8 = 65001};
]])
[Spindle.ffi.cache([table cache])]
local ffi_cache = Spindle.ffi.cache() -- Getter
Spindle.ffi.cache(ffi_cache) -- Setter
[Spindle.debug(...)]
Spindle.debug("Hello ", "World")
[Spindle.initialize(bool printTodo, bool printFixme, bool printDeprecated)]
Spindle.initialize()
Spindle.initialize(true, false, true)
[Spindle.generateWrapper()]
Spindle.generateWrapper() -- Calls the buildWrapper() function in all modules including this function
[Spindle.initializeAegisub()]
Spindle.initializeAegisub() -- Calls the initAegisub() function in all modules including this function
[Spindle.assert(table types, table values[, bool silent_or_nil])]
-- Simple assert of types: every parameter has a defined type
-- First parameter has to be a string ("Hello World" in this case)
Spindle.assert({"string"}, {"Hello World"})
-- Complex assert of types: the type definition `true` (not "true") means that the parameter can be any type except nil (like `mixed` or `object` in other programming languages)
-- First parameter has to be a string ("Hello World" in this case), second can be any type except nil
Spindle.assert({"string", true}, {"Hello World", 33})
-- Assert with defined range of allowed types: A table instead of a type name means that any in this table listed type is allowed
-- First parameter has to be a string ("Hello World" in this case), second can be any type except nil, third parameter has to be a table or a string
Spindle.assert({"string", true, {"table, "string"}}, {"Hello World", 33, {a=1, b=2}})
[Spindle.assertOverrides(...)]
-- If you use one parameter, it has to be a string.
-- If you use two parameters, first has to be string, second any type except nil (which means that case one will be valid)
-- If you use three parameters, first has to be string, second any type except nil and third has to be a table or string
Spindle.assertOverrides({"string"}, {"string", true}, {"string", true, {"table, "string"}}, {"Hello World", 33, {a=1, b=2}})
[Spindle.dev.deeperTrace(int i)]
Spindle.dev.deeperTrace(4)
[Spindle.dev.setDebug(string key, bool state)]
Spindle.dev.setDebug("todo", false)
[Spindle.dev.disable(...)]
Spindle.dev.disable("todo", "fixme")
[Spindle.dev.enable(...)]
Spindle.dev.enable("todo", "fixme")
[Spindle.dev.todo(string message)]
Spindle.dev.todo("My TODO Message")
[Spindle.dev.fixme(string message)]
Spindle.dev.fixme("Fixme, im coded as bad as possible!")
[Spindle.dev.deprecated(string message)]
Spindle.dev.deprecated("I'm deprecated since V0.1 and will be removed in V1.0")
[Spindle.math.randomsteps(number min, number max, number step)]
local value = Spindle.math.randomsteps(1, 11, 2) -- Will result 1, 3, 5, 7, 9 or 11
[Spindle.math.trim(number x, number min, number max)]
local infade = Spindle.math.trim(30, 0, 300) -- Will return 30
local infade = Spindle.math.trim(-23, 0, 300) -- Will return 0
local infade = Spindle.math.trim(455, 0, 300) -- Will return 300
[Spindle.math.round(number x[, number dec])]
local rounded = Spindle.math.round(33.33333) -- Will return 33
local rounded = Spindle.math.round(33.33333, 3) -- Will return 33.333
[Spindle.modules.autoLoadRequires]
Spindle.modules.autoLoadRequires = false -- Will raise an exception is any dependency is not given
Spindle.modules.autoLoadRequires = true -- Will try to autoload module is any dependency is not given
[Spindle.modules.trace]
Spindle.module.trace = true -- Will print all module actions (e.g. module load)
Spindle.module.trace = false -- Will print only critical messages from modules module (e.g. module not found)
[Spindle.modules.loaded(string name)]
if Spindle.modules.loaded("math") then
	Spindle.debug("Module Math is loaded (:")
else
	Spindle.debug("Module Math is not loaded ):")
end
[Spindle.modules.load(string name)]
Spindle.modules.load("ffi")
[Spindle.modules.require(string name)]
Spindle.modules.require("ffi") -- Will raise an exception is module is not loaded and Spindle.modules.autoLoadRequires is set to false
[Spindle.modules.requireAegisub()]
Spindle.modules.requireAegisub()
[Spindle.modules.import(table | string target, table | string source)]
Spindle.modules.import("math", Spindle.math_vectors) -- This function will also merge the buildWrapper() functions is defined in both modules
[Spindle.modules.printLoadedModules()]
Spindle.modules.printLoadedModules() -- A list of all loaded modules will be printed out
[Spindle.oop.generateClass(string name, table properties, table functions, table constructor, ...)]
Spindle.oop.generateClass("Vector4D", {}, {}, {x = "number", y = "number", z = "number", w = "number"}, "x", "y", "z", "w")
Spindle.oop.generateClass("FFIObject", {
	initialized = false, -- Default value for initialized is false and boolean type
	lib = {type = "ctype"}, -- Default value for lib is false (No default) and ctype type
}, {}, {
	name = "string",
	cdef = "string",
	init_callback = "function",
	functions = "table",
	load_library = "string"
}, "name", "cdef", "init_callback", "functions", "load_library")
[rawtype(mixed object)]
local t = rawtype(Vector2D.new(2, 2)) -- Will result "table"
[type(midex object)]
local t = type(Vector2D.new(2, 2)) -- Will result "vector2d", but only if OOP module is loaded!
[Spindle.table.tostring(table t)]
Spindle.debug(Spindle.table.tostring({a=1, b=2})) -- Good for debugging (:
[Spindle.table.removekey(table table, string key)]
local t = {a = 1, b = 2}
Spindle.table.removekey(t, "a") -- t.a is nil now
[Spindle.table.count(table t)]
local t = {a = 1, 3 = 2, c = "Element"}
Spindle.table.count(t) -- 3
[Spindle.table.copy(table table[, number depth])]
local t = {
	a = 1,
	b = 2,
	c = {
		x = 5,
		y = 6
	}
}
local ct = Spindle.table.copy(t) -- An exact copy will be returned
local ct = Spindle.table.copy(t, 1) -- The table will be copied, but no subtables, since there depth = 2 or higher
[Spindle.table.select(table table, function callback[, int max_items])]
local new_table = Spindle.table.select(t, function(e, i) return type(e) == "number" end)
local new_table = Spindle.table.select(t, function(e, i) return type(e) == "number" end, 3)
[Spindle.table.select_first(table table, function callback)]
local new_table = Spindle.table.select_first(t, function(e, i) return type(e) == "number" end)
[Spindle.table.map(table table, function callback)]
Spindle.table.map(t, function(e) return tostring(e) end)
[Spindle.text.trim(string s)]
local s = "     Hello   "
local ns = Spindle.text.trim(s) -- Will return "Hello"
[Spindle.text.headtails(string s)]
local t = "Example I am an example"
local head, tail = Spindle.text.headtails(t) -- head is "Example", tail is "I am an example"
[Spindle.text.words(string s)]
for w in Spindle.text.words("Hello World, how are you?") do
	Spindle.debug(w)
end
[Spindle.text.wordtable(string s)]
local words_table = Spindle.text.wordtable("Hello World, how are you?")
[Spindle.text.split(string s[, string seperator])]
local strings = {"Hello,world,how,are,you", "1:34:test:a_string"}
local t1 = Spindle.text.split(t[1], ",") -- {"Hello", "world", "how", "are", "you"}
local t2 = Spindle.text.split(t[2]) -- {"1", "34", "test", "a_string"}
[Spindle.text.len(string s)]
local len = Spindle.text.len("Hello World, how are you?")
[Spindle.type.isnil(mixed x)]
if Spindle.type.isnil(value) then ... end
[Spindle.type.isbool(mixed x)]
if Spindle.type.isbool(value) then ... end
[Spindle.type.isboolean(mixed x)]
if Spindle.type.isboolean(value) then ... end
[Spindle.type.isnum(mixed x)]
if Spindle.type.isnum(value) then ... end
[Spindle.type.isnumber(mixed x)]
if Spindle.type.isnumber(value) then ... end
[Spindle.type.isint(mixed x)]
if Spindle.type.isint(value) then ... end
[Spindle.type.isinteger(mixed x)]
if Spindle.type.isinteger(value) then ... end
[Spindle.type.isstring(mixed x)]
if Spindle.type.isstring(value) then ... end
[Spindle.type.istext(mixed x)]
if Spindle.type.istext(value) then ... end
[Spindle.type.istable(mixed x)]
if Spindle.type.istable(value) then ... end
[Spindle.type.isfunc(mixed x)]
if Spindle.type.isfunc(value) then ... end
[Spindle.type.isfunction(mixed x)]
if Spindle.type.isfunction(value) then ... end
[Spindle.type.ispure(mixed x)]
if Spindle.type.ispure(value) then ... end
[Spindle.type.isthread(mixed x)]
if Spindle.type.isthread(value) then ... end
[Spindle.type.isudata(mixed x)]
if Spindle.type.isudata(value) then ... end
[Spindle.type.isuserdata(mixed x)]
if Spindle.type.isuserdata(value) then ... end
[Spindle.type.iscdata(mixed x)]
if Spindle.type.iscdata(value) then ... end
[Spindle.type.issame(mixed x, mixed y)]
if Spindle.type.issame("x", "x") then ... end -- TRUE
if Spindle.type.issame("x", "y") then ... end -- FALSE
[Spindle.type.default(mixed x, mixed default)]
local text = Spindle.type.default(loaded_text, "No text loaded before")
[Spindle.type.isarray(mixed x)]
if Spindle.type.isarray(value) then ... end
[Spindle.utf8.charrange(string s, int i)]
local charrange = Spindle.utf8.charrange("$")
[Spindle.utf8.chars(string s)]
for c in Spindle.utf8.chars("Hello") do
	Spindle.debug(c)
end
[Spindle.utf8.chartable(string s)]
local char_table = Spindle.utf8.chartable("Hello")
[Spindle.utf8.len(string s)]
local len = Spindle.utf8.len("Hello")
[Spindle.utf8.bton(string s)]
local n = Spindle.utf8.bton(_binary_data_string_)
[Spindle.utf8.utf8_to_utf16(string s)]
local dir_handle = Spindle.ffi.ffi().gc(Spindle.ffi.ffi().C.FindFirstFileW(Spindle.utf8.utf8_to_utf16(dir_name.."\\*"), find_data), Spindle.ffi.ffi().C.FindClose) -- This example is taken from the old create_dokumentation-script and catch a directory handle (which is internally utf16 in windows)
[Spindle.utf8.utf16_to_utf8(string s)]
local name = Spindle.utf8.utf16_to_utf8(find_data[0].cFileName) -- This example is taken from the old create_dokumentation-script and catch the file name from a directory handle object which is internally utf16 in windows
[Vector2D.new(int x, int y)]
local vector = Vector2D.new(2, 3)
[Vector2D.fromtable(table t)]
local vector = Vector2D.fromtable({x=1, y=2})
[Vector2D:x([int x])]
local vector = Vector2D.new(2, 3)
vector:x(5)
vector:x() -- 5
[Vector2D:y([int y])]
local vector = Vector2D.new(2, 3)
vector:y(5)
vector:y() -- 5
[Vector2D:totable()]
local vector = Vector2D.new(2, 3)
vector:totable() -- {x = 2, y = 3}
[Vector2D:distance()]
local vector = Vector2D.new(2, 3)
vector:distance() -- 3.60555
[Vector2D:to3d()]
local vector = Vector2D.new(2, 3)
vector:to3d() -- {x = 2, y = 3, z = 0}
[Vector2D:to4d()]
local vector = Vector2D.new(2, 3)
vector:to4d() -- {x = 2, y = 3, z = 0, w = 1}
[Vector3D.new(int x, int y, int z)]
local vector = Vector3D.new(2, 3, 4)
[Vector3D.fromtable(table t)]
local vector = Vector3D.fromtable({x=1, y=2, z=3})
[Vector3D:x([int x])]
local vector = Vector3D.new(2, 3, 4)
vector:x(5)
vector:x() -- 5
[Vector3D:y([int y])]
local vector = Vector3D.new(2, 3, 4)
vector:y(5)
vector:y() -- 5
[Vector3D:z([int z])]
local vector = Vector3D.new(2, 3, 4)
vector:z(5)
vector:z() -- 5
[Vector3D:totable()]
local vector = Vector3D.new(2, 3, 4)
vector:totable() -- {x = 2, y = 3, z = 4}
[Vector3D:distance()]
local vector = Vector3D.new(2, 3, 4)
vector:distance() -- 5.385
[Vector3D:to2d()]
local vector = Vector3D.new(2, 3, 4)
vector:to2d() -- {x = 2, y = 3}
[Vector3D:to4d()]
vector:to4d() -- {x = 2, y = 3, z = 4, w = 1}
local vector = Vector3D.new(2, 3, 4)
[Vector4D.new(int x, int y, int z, int w)]
local vector = Vector4D.new(2, 3, 4, 5)
[Vector4D.fromtable(table t)]
local vector = Vector4D.fromtable({x=1, y=2, z=3, w=4})
[Vector4D:x([int x])]
local vector = Vector4D.new(2, 3, 4, 5)
vector:x(5)
vector:x() -- 5
[Vector4D:y([int y])]
local vector = Vector4D.new(2, 3, 4, 5)
vector:y(5)
vector:y() -- 5
[Vector4D:z([int z])]
local vector = Vector4D.new(2, 3, 4, 5)
vector:z(5)
vector:z() -- 5
[Vector4D:w([int w])]
local vector = Vector4D.new(2, 3, 4, 5)
vector:w(5)
vector:w() -- 5
[Vector4D:totable()]
local vector = Vector4D.new(2, 3, 4, 5)
vector:totable() -- {x = 2, y = 3, z = 4, w = 5}
[Vector4D:distance()]
local vector = Vector4D.new(2, 3, 4, 5)
vector:distance() -- 7.348
[Vector4D:to2d()]
local vector = Vector4D.new(2, 3, 4, 5)
vector:to2d() => {x = 0.4, y = 0.6}
[Vector4D:to3d()]
vector:to3d() => {x = 0.4, y = 0.6, z = 0.8}
local vector = Vector4D.new(2, 3, 4, 5)
[Spindle.type.isvector2d(mixed object)]
if Spindle.type.isvector2d(value) then ... end
[Spindle.type.isvector3d(mixed object)]
if Spindle.type.isvector3d(value) then ... end
[Spindle.type.isvector4d(mixed object)]
if Spindle.type.isvector4d(value) then ... end
[Spindle.fileutils.readdir(string dir_name)]
local files = Spindle.fileutils.readdir("C:\\Users")
[DocFile.new(string raw)]
local docfile = DocFile.new("...")
[DocFile.fromtable(table t)]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
[DocFile:raw([string raw])]
local docfile = DocFile.new("...")
docfile:raw("xxx")
docfile:raw() -- "xxx"
[DocFile:path([string path])]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:path("xxx")
docfile:path() -- "xxx"
[DocFile:source([string source])]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:source("xxx")
docfile:source() -- "xxx"
[DocFile:docFile([string docFile])]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:docFile("xxx")
docfile:docFile() -- "xxx"
[DocFile:sourceLink([string sourceLink])]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:sourceLink("xxx")
docfile:sourceLink() -- "xxx"
[DocFile:documentation([string documentation])]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:documentation("xxx")
docfile:documentation() -- "xxx"
[DocFile:totable()]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:totable() -- {raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", }
[DocFile:filter(string key)]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:filter("name") -- The name from documentation header
[DocFile:underline()]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:underline() -- if the name is "hello", the result is "-----"
[DocFile:internal()]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:internal() -- The docInternal parsed as table
[DocFile:filterReferences(string literal)]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:filterReferences() -- "Cache,Config" will return "[Spindle.Cache](../modules/cache.md), [Spindle.Config](../modules/config.md)"
[DocFile:build()]
local docfile = DocFile.fromtable({raw="...", path="...", source="...", docFile="...", sourceLink="...", documentation="...", })
docfile:build() -- Generates the whole documentation file for the current instance
[ExampleFile.new(string raw)]
local examplefile = ExampleFile.new("...")
[ExampleFile.fromtable(table t)]
local examplefile = ExampleFile.fromtable({raw="..."})
[ExampleFile:raw([string raw])]
local examplefile = ExampleFile.new("...")
examplefile:raw("xxx")
examplefile:raw() -- "xxx"
[ExampleFile:totable()]
local examplefile = ExampleFile.new("...")
examplefile:totable() -- {raw="..."}
[ExampleFile:examples([table examples])]
local examplefile = ExampleFile.new("...")
examplefile:examples({"[ExampleFile.new(string raw)]"="local examplefile = ExampleFile.new(\"...\")"})
[ExampleFile:parse()]
local examplefile = ExampleFile.new("...")
examplefile:parse() -- {"[ExampleFile.new(string raw)]"="local examplefile = ExampleFile.new(\"...\")"}
[Spindle.GitDoc.init(string header, string file_path, string file_prefix, string base_url, string examples, string doc_path)]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
[Spindle.GitDoc.run()]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.run() -- parse the whole documentation
[Spindle.GitDoc.init_counters()]
Spindle.GitDoc.init_counters()
Spindle.cache.get("documentation.counters.objects") -- 0
Spindle.cache.get("documentation.counters.examples") -- 0
[Spindle.GitDoc.increment_objects()]
Spindle.GitDoc.init_counters()
Spindle.GitDoc.increment_objects()
Spindle.cache.get("documentation.counters.objects") -- 1
[Spindle.GitDoc.increment_examples()]
Spindle.GitDoc.init_counters()
Spindle.GitDoc.increment_examples()
Spindle.cache.get("documentation.counters.examples") -- 1
[Spindle.GitDoc.cache_examples()]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.cache_examples()
[Spindle.GitDoc.cache_files()]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.cache_files()
[Spindle.GitDoc.read_files()]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.read_files()
[Spindle.GitDoc.read_documentation_partial(string file)]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.init_counters()
Spindle.GitDoc.cache_examples()
Spindle.GitDoc.cache_files()
Spindle.GitDoc.read_documentation_partial("aegi-spindle-git_doc")
[Spindle.GitDoc.extract_doc_path(link)]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.extract_doc_path("doc/modules/gitdoc.md") -- modules/gitdoc.md
[Spindle.GitDoc.prepare_docs()]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.init_counters()
Spindle.GitDoc.cache_examples()
Spindle.GitDoc.cache_files()
Spindle.GitDoc.read_files()
Spindle.GitDoc.prepare_docs()
[Spindle.GitDoc.write_documentation()]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.init_counters()
Spindle.GitDoc.cache_examples()
Spindle.GitDoc.cache_files()
Spindle.GitDoc.read_files()
Spindle.GitDoc.prepare_docs()
Spindle.GitDoc.write_documentation()
[Spindle.GitDoc.write_readme()]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.cache_files()
Spindle.GitDoc.write_readme()
[Spindle.GitDoc.write_readme_partial(file f, string title, table docs, string _type)]
Spindle.GitDoc.init(
	"AegiSpindle Documentation", 
	"../src/",
	"aegi-spindle", 
	"https://github.com/Kagurame/AegiSpindle/tree/dev/src/",
	"../doc/examples",
	"../doc/"
)
Spindle.GitDoc.write_readme_partial(io.open("test", "w+", "Documentation", {}, "core")
[Spindle.type.isdocfile(mixed object)]
if Spindle.type.isdocfile(object) then ... end
[Spindle.type.isexamplefile(mixed object)]
if Spindle.type.isexamplefile(object) then ... end
[Spindle.math.pythagoras(nil | bool | number a, nil | bool | number b[, number c])]
Spindle.math.pythagoras(3, 3, nil) -- => 3, 3, 9
Spindle.math.pythagoras(3, 3) -- => 3, 3, 9
Spindle.math.pythagoras(3, nil, 9) -- => 3, 3, 9
Spindle.math.pythagoras(nil, 3, 9) -- => 3, 3, 9
[Spindle.math.between(number x, number min, number max)]
Spindle.math.between(3, 2, 4) -- => true
Spindle.math.between(3, 4, 6) -- => false
[Spindle.table.reset_indexes(table table)]
local t = {3 = "a", x = "b"}
Spindle.table.reset_indexes(t) -- => {1 = "a", 2 = "b"}
[Spindle.table.minmax(table table)]
local t = {-3, 2, 4, 9, 1}
Spindle.table.minmax(t) -- -3, 9
[Spindle.table.min(table table)]
local t = {-3, 2, 4, 9, 1}
Spindle.table.min(t) -- -3
[Spindle.table.max(table table)]
local t = {-3, 2, 4, 9, 1}
Spindle.table.max(t) -- 9
[Spindle.table.contains(table t, mixed val[, string mode])]
local t = {a = 1, b = 2, c = 3, d = 4, e = 5}
Spindle.table.contains(t, "b")          -- false
Spindle.table.contains(t, "b", "key")   -- true
Spindle.table.contains(t, "b", "value") -- false
Spindle.table.contains(t, "b", "marc")  -- error
Spindle.table.contains(t, 3)            -- true
Spindle.table.contains(t, 3, "key")     -- false
Spindle.table.contains(t, 3, "value")   -- true
Spindle.table.contains(t, 3, "marc")    -- error
[FFIObject.extendProperty(string name, mixed _type)]
FFIObject.extendProperty("test", 0)
-- Creates the property "test" with default value `0` and type int to FFIObject
-- Also two new methods are available:
instance:test() -- Gets value of test
instance:test(int value) -- Sets value of test
-- The last parameter has to be a value of the desired type.
-- You can also use a table with element type and the desired type as string
FFIObject.extendProperty("test", {type = "number"})
[DocFile.extendProperty(string name, mixed _type)]
DocFile.extendProperty("test", 0)
-- Creates the property "test" with default value `0` and type int to DocFile
-- Also two new methods are available:
instance:test() -- Gets value of test
instance:test(int value) -- Sets value of test
-- The last parameter has to be a value of the desired type.
-- You can also use a table with element type and the desired type as string
DocFile.extendProperty("test", {type = "number"})
[ExampleFile.extendProperty(string name, mixed _type)]
ExampleFile.extendProperty("test", 0)
-- Creates the property "test" with default value `0` and type int to ExampleFile
-- Also two new methods are available:
instance:test() -- Gets value of test
instance:test(int value) -- Sets value of test
-- The last parameter has to be a value of the desired type.
-- You can also use a table with element type and the desired type as string
ExampleFile.extendProperty("test", {type = "number"})
[Vector2D.extendProperty(string name, mixed _type)]
Vector2D.extendProperty("test", 0)
-- Creates the property "test" with default value `0` and type int to Vector2D
-- Also two new methods are available:
instance:test() -- Gets value of test
instance:test(int value) -- Sets value of test
-- The last parameter has to be a value of the desired type.
-- You can also use a table with element type and the desired type as string
Vector2D.extendProperty("test", {type = "number"})
[Vector3D.extendProperty(string name, mixed _type)]
Vector3D.extendProperty("test", 0)
-- Creates the property "test" with default value `0` and type int to Vector3D
-- Also two new methods are available:
instance:test() -- Gets value of test
instance:test(int value) -- Sets value of test
-- The last parameter has to be a value of the desired type.
-- You can also use a table with element type and the desired type as string
Vector3D.extendProperty("test", {type = "number"})
[Vector4D.extendProperty(string name, mixed _type)]
Vector4D.extendProperty("test", 0)
-- Creates the property "test" with default value `0` and type int to Vector4D
-- Also two new methods are available:
instance:test() -- Gets value of test
instance:test(int value) -- Sets value of test
-- The last parameter has to be a value of the desired type.
-- You can also use a table with element type and the desired type as string
Vector4D.extendProperty("test", {type = "number"})
[Matrix.extendProperty(string name, mixed _type)]
Matrix.extendProperty("test", 0)
-- Creates the property "test" with default value `0` and type int to Matrix
-- Also two new methods are available:
instance:test() -- Gets value of test
instance:test(int value) -- Sets value of test
-- The last parameter has to be a value of the desired type.
-- You can also use a table with element type and the desired type as string
Matrix.extendProperty("test", {type = "number"})
[Vector4D.new(int x, int y, int z, int w)]
local vector = Vector4D.new(2, 3, 4, 5)
[Vector4D.fromtable(table t)]
local vector = Vector4D.fromtable({x=1, y=2, z=3, w=4})
[Vector4D:x([int x])]
local vector = Vector4D.new(2, 3, 4, 5)
vector:x(5)
vector:x() -- 5
[Vector4D:y([int y])]
local vector = Vector4D.new(2, 3, 4, 5)
vector:y(5)
vector:y() -- 5
[Vector4D:z([int z])]
local vector = Vector4D.new(2, 3, 4, 5)
vector:z(5)
vector:z() -- 5
[Vector4D:w([int w])]
local vector = Vector4D.new(2, 3, 4, 5)
vector:w(5)
vector:w() -- 5
[Vector4D:totable()]
local vector = Vector4D.new(2, 3, 4, 5)
vector:totable() -- {x = 2, y = 3, z = 4, w = 5}
[Matrix.new()]
local matrix = Matrix.new()
Spindle.debug(matrix)
--[[
	[Matrix](
		[Vector4D] p1 (
			x = 1
			y = 0
			z = 0
			w = 0
		)
		[Vector4D] p2 (
			x = 0
			y = 1
			z = 0
			w = 0
		)
		[Vector4D] p3 (
			x = 0
			y = 0
			z = 1
			w = 0
		)
		[Vector4D] p4 (
			x = 0
			y = 0
			z = 0
			w = 1
		)
	)
]]
[Matrix.fromtable(table t)]
local t = {
	p1 = Vector4D.new(1, 0, 0, 0),
	p2 = Vector4D.new(0, 1, 0, 0),
	p3 = Vector4D.new(0, 0, 1, 0),
	p4 = Vector4D.new(0, 0, 0, 1),
}
local matrix = Matrix.fromtable(t) -- Results in the same matrix as Matrix.new would
[Matrix:totable()]
local matrix = Matrix.new()
matrix:totable()
--[[
	{
		p1 {
			x = 1
			y = 0
			z = 0
			w = 0
		},
		p2 {
			x = 0
			y = 1
			z = 0
			w = 0
		},
		p3 {
			x = 0
			y = 0
			z = 1
			w = 0
		},
		p4 {
			x = 0
			y = 0
			z = 0
			w = 1
		}
	}
]]
[Matrix:p1([Vector4D p1])]
local matrix = Matrix.new()
matrix:p1(Vector4D.new(2, 3, 4, 5))
matrix:p1() -- {x = 2, y = 3, z = 4, w = 5}
[Matrix:p2([Vector4D p2])]
local matrix = Matrix.new()
matrix:p2(Vector4D.new(2, 3, 4, 5))
matrix:p2() -- {x = 2, y = 3, z = 4, w = 5}
[Matrix:p3([Vector4D p3])]
local matrix = Matrix.new()
matrix:p3(Vector4D.new(2, 3, 4, 5))
matrix:p3() -- {x = 2, y = 3, z = 4, w = 5}
[Matrix:p4([Vector4D p4])]
local matrix = Matrix.new()
matrix:p4(Vector4D.new(2, 3, 4, 5))
matrix:p4() -- {x = 2, y = 3, z = 4, w = 5}
[Matrix:toArray()]
local matrix = Matrix.new()
matrix:toArray() -- {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
[Matrix:fromArray(table arr)]
local arr = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
local matrix = Matrix.new()
matrix:fromArray(arr) -- Values transported to matrix
[Matrix:get(int i)]
local matrix = Matrix.new()
matrix:get(1) -- 1
[Matrix:set(int i, number v)]
local matrix = Matrix.new()
matrix:set(3, 7)
matrix:get(3) -- 7
matrix:p1():z() -- 7
[Matrix:multiply(Matrix mat)]
local matrix = Matrix.new()
matrix:set(1, 33)
local matrixB = Matrix.new()
matrixB:set(3, 64)
matrixB:set(1, 19)
matrixB:set(14, 4)
matrix:multiply(matrixB)
matrix:toArray() -- {627, 0, 64, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 4, 0, 1}
[Matrix:translate(Vector3D vector)]
local matrix = Matrix.new()
matrix:set(1, 33)
local matrixB = Matrix.new()
matrixB:set(3, 64)
matrixB:set(1, 19)
matrixB:set(14, 4)
matrix:multiply(matrixB)
matrix:translate(Vector3D.new(3, 6, 9))
matrix:toArray() --[[ 
{
	627,
	0,
	64,
	0,
	0,
	1,
	0,
	0,
	0,
	0,
	1,
	0,
	1881,
	10,
	201,
	1
}
]]
[Matrix:scale(Vector3D vector)]
local matrix = Matrix.new()
matrix:set(1, 33)
local matrixB = Matrix.new()
matrixB:set(3, 64)
matrixB:set(1, 19)
matrixB:set(14, 4)
matrix:multiply(matrixB)
matrix:translate(Vector3D.new(3, 6, 9))
matrix:scale(Vector3D.new(3, 6, 9))
matrix:toArray() --[[
{
	1881,
	0,
	192,
	0,
	0,
	6,
	0,
	0,
	0,
	0,
	9,
	0,
	1881,
	10,
	201,
	1
}
]]
[Matrix:rotate(string axis, number angle)]
local matrix = Matrix.new()
matrix:set(1, 33)
local matrixB = Matrix.new()
matrixB:set(3, 64)
matrixB:set(1, 19)
matrixB:set(14, 4)
matrix:multiply(matrixB)
matrix:translate(Vector3D.new(3, 6, 9))
matrix:scale(Vector3D.new(3, 6, 9))
matrix:rotate("x", 13)
matrix:rotate("y", 13)
matrix:rotate("z", 13)
matrix:toArray() --[[
{
	1785.8158005444,
	-1.0192772853748,
	184.66176598851,
	0,
	412.28806355513,
	5.7646812968701,
	40.554714163689,
	0,
	-423.13293322081,
	1.3151134403672,
	-34.646029225676,
	0,
	1881,
	10,
	201,
	1
}
]]
[Matrix:inverse()]
local matrix = Matrix.new()
matrix:set(1, 33)
local matrixB = Matrix.new()
matrixB:set(3, 64)
matrixB:set(1, 19)
matrixB:set(14, 4)
matrix:multiply(matrixB)
matrix:translate(Vector3D.new(3, 6, 9))
matrix:scale(Vector3D.new(3, 6, 9))
matrix:rotate("x", 13)
matrix:rotate("y", 13)
matrix:rotate("z", 13)
matrix:inverse()
matrix:toArray() --[[
{
	-0.0024913596624627, 
	0.002043212433844, 
	-0.010887163325289, 
	0, 
	-0.028313257927079, 
	0.16013003602417, 
	0.03653092889909, 
	0, 
	0.029352315355427, 
	-0.018875505284719, 
	0.10548855812773, 
	0, 
	-0.93043528207764, 
	-1.6506063860738, 
	-1.0897552577966, 
	1
}
]]
[Matrix:transform(Vector3D | Vector4D vector)]
local matrix = Matrix.new()
matrix:set(1, 33)
local matrixB = Matrix.new()
matrixB:set(3, 64)
matrixB:set(1, 19)
matrixB:set(14, 4)
matrix:multiply(matrixB)
matrix:translate(Vector3D.new(3, 6, 9))
matrix:scale(Vector3D.new(3, 6, 9))
matrix:rotate("x", 13)
matrix:rotate("y", 13)
matrix:rotate("z", 13)
matrix:inverse()

local point = Vector4D.new(3, 6, 9, 12)
point = matrix:transform(point) -- {-19.010246327001, -11.078406173283, -11.941141986991, 12}
[end]